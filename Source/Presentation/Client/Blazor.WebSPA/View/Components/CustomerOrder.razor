@inject HttpClient Http;
@using Domain.Services;
@using Blazor.WebSPA.ViewModels;
@inject HomeViewModel homeViewModel;
@inject CustomerOrderViewModel covModel;
@inject IRecipeService recipeService;
@inject IFruitPressService fruitPressService;

<h3>Customer Order</h3>

<section class="form-container">
    <EditForm EditContext="@homeViewModel.EditFormContext" OnValidSubmit="HandleValidSubmit" @onreset="HandleReset">
        <div class=" form-group col">
            <ul class="validation-errors bg-light" style="background-color: @homeViewModel.StatusBG !important; border:none;">
                <li class="validation-message"style="color:@homeViewModel.StatusFC !important;">@homeViewModel.ProductionResult</li>
            </ul>
        </div>
        <div class=" form-group col">
            <DataAnnotationsValidator />
            <ValidationSummary />
        </div>
        <div class="form-group col">
            <label>Select recipe:</label>
            <InputSelect ValueExpression="@(()=>covModel.Id)" ValueChanged="@((int id) => OnValueChanged(id))" class="form-control">
                @if (homeViewModel.Recipes != null)
                {
                    @foreach (var recipe in homeViewModel.Recipes)
                    {
                        <option value="@recipe.Id">@recipe.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => covModel.Id)" />
        </div>
        <div class="form-group col">
            <label>Order quantity:</label>
            <InputNumber @bind-Value="covModel.OrderQuantity" min="1" class="form-control" />
            <ValidationMessage For="@(() => covModel.OrderQuantity)" />
        </div>
        <div class="form-group col">
            <label>Money paid</label>
            <InputNumber @bind-Value="covModel.MoneyAmountReceived" min="0" class="form-control" />
            <ValidationMessage For="@(() => covModel.MoneyAmountReceived)" />
        </div>
        <div class="form-group col">
            <label>Apples added:</label>
            <InputNumber @bind-Value="covModel.AppleQuantity" min="0.0" step="0.5" class="form-control" />
            <ValidationMessage For="@(() => covModel.AppleQuantity)" />
        </div>
        <div class="form-group col">
            <label>Melons added:</label>
            <InputNumber @bind-Value="covModel.MelonQuantity" min="0.0" step="0.5" class="form-control" />
            <ValidationMessage For="@(() => covModel.MelonQuantity)" />
        </div>
        <div class="form-group col">
            <label>Oranges added:</label>
            <InputNumber @bind-Value="covModel.OrangeQuantity" min="0.0" step="0.5" class="form-control" />
            <ValidationMessage For="@(() => covModel.OrangeQuantity)" />
        </div>

        <!-- WE WILL TRY TO IMPLEMENT DYNAMIC INPUT GENERATOR HERE IN THE FUTURE INSTEAD OF PRIMITIVE INPUT NAMING FOR ALL ITEMS -->
        @*@if (homeViewModel.Recipes != null)
        {
            @foreach (var recipe in homeViewModel.Recipes)
            {
                <div class="form-group col">
                    <label>@recipe.AllowedFruit (s) added:</label>
                    <InputNumber @bind-Value="covModel.ItemQuantity" DisplayName="@recipe.AllowedFruit" step="0.5" min="0.0" class="form-control" />
                    <ValidationMessage For="@(() => covModel.ItemQuantity)" />
                </div>
            }
        }*@

        <div class="text-left">
            <button type="submit" class="btn btn-success mr-1">PROCESS ORDER</button>
        </div>
    </EditForm>
</section>

@code {

    protected override async Task OnInitializedAsync()
    {
        homeViewModel.Recipes = await recipeService.GetAllAsync();
        homeViewModel.Recipe = await recipeService.GetByIdAsync(covModel.Id);
    }

    protected override void OnInitialized()
    {
        homeViewModel.EditFormContext = new EditContext(covModel);
    }

    private async Task OnValueChanged(int id)
    {
        homeViewModel.Recipe = await recipeService.GetByIdAsync(id);
    }

    private void ResetFieledValues()
    {
        covModel.Id = 1;
        covModel.MoneyAmountReceived = 0;
        covModel.OrderQuantity = 1;
        covModel.AppleQuantity = 0;
        covModel.MelonQuantity = 0;
        covModel.OrangeQuantity = 0;
    }

    private void HandleValidSubmit()
    {
        Dictionary<string, decimal> fruits = new();
        fruits.Add("Apple", covModel.AppleQuantity);
        fruits.Add("Melon", covModel.MelonQuantity);
        fruits.Add("Orange", covModel.OrangeQuantity);

        var result = fruitPressService.Produce(homeViewModel.Recipe, fruits, covModel.MoneyAmountReceived, covModel.OrderQuantity);

        if (result.FirstOrDefault().Substring(0, 1) == "E")
        {
            homeViewModel.StatusBG = "#F8D7DA";
            homeViewModel.StatusFC = "#A22029";
        }
        else
        {
            homeViewModel.StatusBG = "#C2F5C7";
            homeViewModel.StatusFC = "green";
        }

        homeViewModel.ProductionResult = String.Join("\n", result.ToArray());
    }

    private void HandleReset()
    {
        homeViewModel.EditFormContext = new EditContext(covModel);
    }

}
